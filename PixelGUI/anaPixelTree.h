/*  anaPixelTree.h
 *  	Author: Caleb Fangmeier
 * 		contact: cfangmeier@hotmail.com
 * 		date: Mon May 23 14:32:31 CEST 2011
 * 
 * 		anaPixelTree was originally created by from a pixelTree n-tuple
 * 		via TTree::MakeClass(). It was later modifed to integrate its
 * 		functionality into PixelGUI.
 *		AUTOGENERATED BY: ./configure
 */

#ifndef anaPixelTree_h
#define anaPixelTree_h

#include <iostream>
#include <fstream>
#include <sstream>
#include <TROOT.h>
#include <TChain.h>
#include <TFile.h>
#include <TH1.h>
#include <TH2.h>
#include <TStyle.h>
#include <TCanvas.h>

using namespace std;

class anaPixelTree {
	public :
	TTree          *fChain;   //!pointer to the analyzed TTree or TChain
	Int_t           fCurrent; //!current Tree number in a TChain
	
Int_t run;
Int_t lumiblock;
Int_t event;
Int_t bx;
Int_t orbit;
Float_t bz;
UInt_t tlo;
UInt_t thi;
UInt_t fed1;
UInt_t fed2;
UInt_t l1t;
UInt_t l1ta[4];
UInt_t l1tt[4];
UInt_t hlta[8];
Bool_t ttA[64];
Bool_t l1A[128];
Bool_t hlA[256];
UInt_t hlt;
Int_t PvN;
Float_t PvX[100];  // [PvN]
Float_t PvY[100];  // [PvN]
Float_t PvZ[100];  // [PvN]
Float_t PvXe[100];  // [PvN]
Float_t PvYe[100];  // [PvN]
Float_t PvZe[100];  // [PvN]
Float_t PvChi2[100];  // [PvN]
Float_t PvNdof[100];  // [PvN]
Int_t PvIsFake[100];  // [PvN]
Int_t MuN;
Int_t MuType[100];  // [MuN]
Int_t MuTkI[100];  // [MuN]
Float_t MuPt[100];  // [MuN]
Float_t MuTheta[100];  // [MuN]
Float_t MuPhi[100];  // [MuN]
Float_t MuT[100];  // [MuN]
Float_t MuTcorr[100];  // [MuN]
Float_t MuTerr[100];  // [MuN]
Float_t MuTmean;
Float_t HfEplus;
Float_t HfEminus;
Float_t HfTplus;
Float_t HfTminus;
Int_t TkN;
Int_t TkQuality[10000];  // [TkN]
Int_t TkCharge[10000];  // [TkN]
Float_t TkChi2[10000];  // [TkN]
Float_t TkNdof[10000];  // [TkN]
Float_t TkPt[10000];  // [TkN]
Float_t TkTheta[10000];  // [TkN]
Float_t TkEta[10000];  // [TkN]
Float_t TkPhi[10000];  // [TkN]
Float_t TkD0[10000];  // [TkN]
Float_t TkDz[10000];  // [TkN]
Float_t TkVx[10000];  // [TkN]
Float_t TkVy[10000];  // [TkN]
Float_t TkVz[10000];  // [TkN]
Float_t TkAlpha[10000][20];  // [TkN]
Float_t TkBeta[10000][20];  // [TkN]
Float_t TkResX[10000][20];  // [TkN]
Float_t TkResY[10000][20];  // [TkN]
Float_t TkResXe[10000][20];  // [TkN]
Float_t TkResYe[10000][20];  // [TkN]
Float_t TkRes2X[10000][20];  // [TkN]
Float_t TkRes2Xe[10000][20];  // [TkN]
Int_t TkClN[10000];  // [TkN]
Int_t TkClI[10000][20];  // [TkN]
Int_t TkType[10000];  // [TkN]
Int_t TkMuI[10000];  // [TkN]
Int_t ClN;
Float_t ClRow[10000];  // [ClN]
Float_t ClCol[10000];  // [ClN]
Float_t ClLx[10000];  // [ClN]
Float_t ClLxE[10000];  // [ClN]
Float_t ClLy[10000];  // [ClN]
Float_t ClLyE[10000];  // [ClN]
Float_t ClGx[10000];  // [ClN]
Float_t ClGy[10000];  // [ClN]
Float_t ClGz[10000];  // [ClN]
Int_t ClSize[10000];  // [ClN]
Int_t ClSizeX[10000];  // [ClN]
Int_t ClSizeY[10000];  // [ClN]
Int_t ClFlipped[10000];  // [ClN]
Int_t ClLayer[10000];  // [ClN]
Int_t ClLadder[10000];  // [ClN]
Int_t ClModule[10000];  // [ClN]
Int_t ClDisk[10000];  // [ClN]
Int_t ClBlade[10000];  // [ClN]
Int_t ClPanel[10000];  // [ClN]
Int_t ClPlaquette[10000];  // [ClN]
Int_t ClDetId[10000];  // [ClN]
Float_t ClCharge[10000];  // [ClN]
Float_t ClChargeCorr[10000];  // [ClN]
Int_t ClType[10000];  // [ClN]
Float_t ClRhLx[10000];  // [ClN]
Float_t ClRhLxE[10000];  // [ClN]
Float_t ClRhLy[10000];  // [ClN]
Float_t ClRhLyE[10000];  // [ClN]
Float_t ClRhGx[10000];  // [ClN]
Float_t ClRhGy[10000];  // [ClN]
Float_t ClRhGz[10000];  // [ClN]
Float_t ClRhProb[10000];  // [ClN]
Float_t ClRhProbX[10000];  // [ClN]
Float_t ClRhProbY[10000];  // [ClN]
UInt_t ClRhQualWord[10000];  // [ClN]
Int_t ClRhqBin[10000];  // [ClN]
Int_t ClRhSpansTwoROCs[10000];  // [ClN]
Int_t ClRhIsOnEdge[10000];  // [ClN]
Int_t ClRhHasBadPixels[10000];  // [ClN]
Int_t ClTkN[10000];  // [ClN]
Int_t ClTkI[100000][100];  // [ClN]
Int_t ClDgN[10000];  // [ClN]
Int_t ClDgI[100000][100];  // [ClN]
Int_t DgN;
Int_t DgRow[1000000];  // [DgN]
Int_t DgCol[1000000];  // [DgN]
Int_t DgDetid[1000000];  // [DgN]
Int_t DgRoc[1000000];  // [DgN]
Int_t DgRocR[1000000];  // [DgN]
Int_t DgRocC[1000000];  // [DgN]
Float_t DgLx[1000000];  // [DgN]
Float_t DgLy[1000000];  // [DgN]
Float_t DgGx[1000000];  // [DgN]
Float_t DgGy[1000000];  // [DgN]
Float_t DgGz[1000000];  // [DgN]
Float_t DgAdc[1000000];  // [DgN]
Float_t DgCharge[1000000];  // [DgN]
Int_t DgClI[1000000];  // [DgN]

   // List of branches
   TBranch        *b_run;   //!
   TBranch        *b_lumiblock;   //!
   TBranch        *b_event;   //!
   TBranch        *b_bx;   //!
   TBranch        *b_orbit;   //!
   TBranch        *b_bz;   //!
   TBranch        *b_tlo;   //!
   TBranch        *b_thi;   //!
   TBranch        *b_fed1;   //!
   TBranch        *b_fed2;   //!
   TBranch        *b_l1t;   //!
   TBranch        *b_l1ta;   //!
   TBranch        *b_l1tt;   //!
   TBranch        *b_hlta;   //!
   TBranch        *b_ttA;   //!
   TBranch        *b_l1A;   //!
   TBranch        *b_hlA;   //!
   TBranch        *b_hlt;   //!
   TBranch        *b_PvN;   //!
   TBranch        *b_PvX;   //!
   TBranch        *b_PvY;   //!
   TBranch        *b_PvZ;   //!
   TBranch        *b_PvXe;   //!
   TBranch        *b_PvYe;   //!
   TBranch        *b_PvZe;   //!
   TBranch        *b_PvChi2;   //!
   TBranch        *b_PvNdof;   //!
   TBranch        *b_PvIsFake;   //!
   TBranch        *b_MuN;   //!
   TBranch        *b_MuType;   //!
   TBranch        *b_MuTkI;   //!
   TBranch        *b_MuPt;   //!
   TBranch        *b_MuTheta;   //!
   TBranch        *b_MuPhi;   //!
   TBranch        *b_MuT;   //!
   TBranch        *b_MuTcorr;   //!
   TBranch        *b_MuTerr;   //!
   TBranch        *b_MuTmean;   //!
   TBranch        *b_HfEplus;   //!
   TBranch        *b_HfEminus;   //!
   TBranch        *b_HfTplus;   //!
   TBranch        *b_HfTminus;   //!
   TBranch        *b_TkN;   //!
   TBranch        *b_TkQuality;   //!
   TBranch        *b_TkCharge;   //!
   TBranch        *b_TkChi2;   //!
   TBranch        *b_TkNdof;   //!
   TBranch        *b_TkPt;   //!
   TBranch        *b_TkTheta;   //!
   TBranch        *b_TkEta;   //!
   TBranch        *b_TkPhi;   //!
   TBranch        *b_TkD0;   //!
   TBranch        *b_TkDz;   //!
   TBranch        *b_TkVx;   //!
   TBranch        *b_TkVy;   //!
   TBranch        *b_TkVz;   //!
   TBranch        *b_TkAlpha;   //!
   TBranch        *b_TkBeta;   //!
   TBranch        *b_TkResX;   //!
   TBranch        *b_TkResY;   //!
   TBranch        *b_TkResXe;   //!
   TBranch        *b_TkResYe;   //!
   TBranch        *b_TkRes2X;   //!
   TBranch        *b_TkRes2Xe;   //!
   TBranch        *b_TkClN;   //!
   TBranch        *b_TkClI;   //!
   TBranch        *b_TkType;   //!
   TBranch        *b_TkMuI;   //!
   TBranch        *b_ClN;   //!
   TBranch        *b_ClRow;   //!
   TBranch        *b_ClCol;   //!
   TBranch        *b_ClLx;   //!
   TBranch        *b_ClLxE;   //!
   TBranch        *b_ClLy;   //!
   TBranch        *b_ClLyE;   //!
   TBranch        *b_ClGx;   //!
   TBranch        *b_ClGy;   //!
   TBranch        *b_ClGz;   //!
   TBranch        *b_ClSize;   //!
   TBranch        *b_ClSizeX;   //!
   TBranch        *b_ClSizeY;   //!
   TBranch        *b_ClFlipped;   //!
   TBranch        *b_ClLayer;   //!
   TBranch        *b_ClLadder;   //!
   TBranch        *b_ClModule;   //!
   TBranch        *b_ClDisk;   //!
   TBranch        *b_ClBlade;   //!
   TBranch        *b_ClPanel;   //!
   TBranch        *b_ClPlaquette;   //!
   TBranch        *b_ClDetId;   //!
   TBranch        *b_ClCharge;   //!
   TBranch        *b_ClChargeCorr;   //!
   TBranch        *b_ClType;   //!
   TBranch        *b_ClRhLx;   //!
   TBranch        *b_ClRhLxE;   //!
   TBranch        *b_ClRhLy;   //!
   TBranch        *b_ClRhLyE;   //!
   TBranch        *b_ClRhGx;   //!
   TBranch        *b_ClRhGy;   //!
   TBranch        *b_ClRhGz;   //!
   TBranch        *b_ClRhProb;   //!
   TBranch        *b_ClRhProbX;   //!
   TBranch        *b_ClRhProbY;   //!
   TBranch        *b_ClRhQualWord;   //!
   TBranch        *b_ClRhqBin;   //!
   TBranch        *b_ClRhSpansTwoROCs;   //!
   TBranch        *b_ClRhIsOnEdge;   //!
   TBranch        *b_ClRhHasBadPixels;   //!
   TBranch        *b_ClTkN;   //!
   TBranch        *b_ClTkI;   //!
   TBranch        *b_ClDgN;   //!
   TBranch        *b_ClDgI;   //!
   TBranch        *b_DgN;   //!
   TBranch        *b_DgRow;   //!
   TBranch        *b_DgCol;   //!
   TBranch        *b_DgDetid;   //!
   TBranch        *b_DgRoc;   //!
   TBranch        *b_DgRocR;   //!
   TBranch        *b_DgRocC;   //!
   TBranch        *b_DgLx;   //!
   TBranch        *b_DgLy;   //!
   TBranch        *b_DgGx;   //!
   TBranch        *b_DgGy;   //!
   TBranch        *b_DgGz;   //!
   TBranch        *b_DgAdc;   //!
   TBranch        *b_DgCharge;   //!
   TBranch        *b_DgClI;   //!

	anaPixelTree();
	anaPixelTree(TChain *pixelTree);
	virtual ~anaPixelTree();
	virtual Int_t    Cut(Long64_t entry);
	virtual Int_t    GetEntry(Long64_t entry);
	virtual Long64_t LoadTree(Long64_t entry);
	virtual void     Init(TTree *tree);
	virtual void     Loop(int nevt = -1)     = 0; //implemented by child class
	virtual Bool_t   Notify();
	virtual void     Show(Long64_t entry = -1);
};

#endif



